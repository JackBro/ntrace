#pragma once

/*----------------------------------------------------------------------
 * Purpose:
 *		User Mode Function Boundary Tracing Library.
 *
 *		N.B. All communication to the target process is half-duplex.
 *
 * Copyright:
 *		Johannes Passing (johannes.passing@googlemail.com)
 */

#ifndef JPFBT_TARGET_USERMODE
	#define JPFBT_TARGET_USERMODE
#endif

#include <jpfbt.h>
#include <jpufbtmsg.h>

typedef enum
{
	JpufbtFunctionEntryEventType,
	JpufbtFunctionExitEventType
} JPUFBT_EVENT_TYPE;

typedef PVOID JPUFBT_HANDLE;

typedef struct _JPUFBT_EVENT
{
	JPUFBT_EVENT_TYPE Type;

	//
	// VA of hooked procedure. Note that VA refers to the target
	// process, not the current process.
	//
	JPFBT_PROCEDURE Procedure;

	//
	// Captured context.
	//
	JPFBT_CONTEXT ThreadContext;

	//
	// Timestamp (obtained by QueryPerformanceCounter).
	//
	LARGE_INTEGER Timestamp;
} JPUFBT_EVENT, *PJPUFBT_EVENT;

/*++
	Routine Description:
		Callback for consuming events generated by the target
		process.

	Parameters:
		Session		- Handle obtained by JpufbtAttachProcess.
		ThreadId	- Thread of target process that generated events.
		EventCount	- # of entries in Events array.
		Events		- array of events.
		ContextArg	- User-defined value.

	Return Value:
		None
--*/
typedef VOID ( JPFBTCALLTYPE * JPUFBT_EVENT_ROUTINE ) (
	__in JPUFBT_HANDLE Session,
	__in DWORD ThreadId,
	__in DWORD ProcessId,
	__in UINT EventCount,
	__in_ecount(EventCount) CONST PJPUFBT_EVENT Events,
	__in_opt PVOID ContextArg
	);

/*++
	Routine Description:
		Attach to a running process. The necessary code is injected
		into the target and a communication channel is established.
	
		Routine must be threadsafe.

	Parameters:
		Process		- Handle to target process. 
		Session		- Result.

	Return Value:
		STATUS_SUCCESS on success
		(any NTSTATUS) on failure.
--*/
NTSTATUS JpufbtAttachProcess(
	__in HANDLE Process,
	__out JPUFBT_HANDLE *Session
	);

/*++
	Routine Description:
		Detach from a process. Any tracing operation must have been
		stopped previous to this call.

		Routine is threadsafe.

	Parameters:
		Session		- Handle obtained by JpufbtAttachProcess.
	
	Return Value:
		STATUS_SUCCESS on success
		(any NTSTATUS) on failure.
--*/
NTSTATUS JpufbtDetachProcess(
	__in JPUFBT_HANDLE Session
	);

/*++
	Routine Description:
		Initialize tracing subsystem in target.

		Routine is threadsafe.

	Parameters:
		Session		- Handle obtained by JpufbtAttachProcess.
		BufferCount - total number of buffers. Should be at least
					  2 times the total number of threads.
		BufferSize  - size of each buffer. Must be a multiple of 
					  MEMORY_ALLOCATION_ALIGNMENT.

	Return Value:
		STATUS_SUCCESS on success
		(any NTSTATUS) on failure.
--*/
NTSTATUS JpufbtInitializeTracing(
	__in JPUFBT_HANDLE Session,
	__in UINT BufferCount,
	__in UINT BufferSize
	);

/*++
	Routine Description:
		Obtain trace data, if available.

		Routine is threadsafe.

	Parameters:
		Session		- Handle obtained by JpufbtAttachProcess.
		Timeout		- Max time to wait for new events.
		EventRoutine- Callback to which events are passed unless
					  a timeout has occured. Will be called at most once.
	    ContextArg	- User-defined value passed to EventRoutine.

	Return Value:
		STATUS_SUCCESS on success
		(any NTSTATUS) on failure.
--*/
NTSTATUS JpufbtReadTrace(
	__in JPUFBT_HANDLE Session,
	__in DWORD Timeout,
	__in JPUFBT_EVENT_ROUTINE EventRoutine,
	__in_opt PVOID ContextArg
	);

/*++
	Routine Description:
		Shutdown tracing subsystem in target.

		Routine is threadsafe.

	Parameters:
		Session		- Handle obtained by JpufbtAttachProcess.
		EventRoutine- Callback to which remaining events are passed. 
					  Will be called any number of times.
		ContextArg  - Parameter passwd to EventRoutine.

	Return Value:
		STATUS_SUCCESS on success
		(any NTSTATUS) on failure.
--*/
NTSTATUS JpufbtShutdownTracing(
	__in JPUFBT_HANDLE Session,
	__in JPUFBT_EVENT_ROUTINE EventRoutine,
	__in_opt PVOID ContextArg
	);

/*++
	Routine Description:
		Instrument one or more procedures. Instrumentation requires 
		either 5 byte (/functionpadmin:5) or 10 byte (/functionpadmin:10) 
		padding and a hotpatchable prolog.

		Routine is threadsafe.

	Parameters:
		ProcedureCount  - # of procedures to instrument.
		Procedures	    - Procedures to instrument.
						  The caller has to ensure that the array
						  is free of duplicates. Duplicate entries
						  lead to undefined behaviour.
		FailedProcedure - Procedure that made the instrumentation fail.

	Return Value:
		STATUS_SUCCESS on success. FailedProcedure is set to NULL.
		STATUS_FBT_PROC_NOT_PATCHABLE if at least one procedure does not 
			fulfill criteria. FailedProcedure is set.
		STATUS_FBT_PROC_ALREADY_PATCHED if procedure has already been
			patched. FailedProcedure is set.
--*/
NTSTATUS JpufbtInstrumentProcedure(
	__in JPUFBT_HANDLE Session,
	__in JPFBT_INSTRUMENTATION_ACTION Action,
	__in UINT ProcedureCount,
	__in_ecount(InstrCount) CONST PJPFBT_PROCEDURE Procedures,
	__out_opt PJPFBT_PROCEDURE FailedProcedure
	);